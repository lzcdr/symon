/*
 * ------------------------------------------------------------------------------
 * Project: symon
 * Version: 0.0.1
 * Description: Tiny Command Line Interface Remote System Monitor.
 * Author: lzcdr
 * Date: 2024-03-04 10:07:41
 * ------------------------------------------------------------------------------
 * This file was automatically generated by the Bytesnap RPC (version 0.1.0) 
 * project generator.
 * ------------------------------------------------------------------------------
 */

// 
// vst_server.hpp
// ---------------
// tcp/ip client/server framework based on boost::asio
// using custom protocol with a fixed length message header
// and variable length message body
//
// Copyright(c) 2024-present, lzcdr
//
// Distributed under the MIT License (http://opensource.org/licenses/MIT)

#ifndef VST_SERVER_HPP
#define VST_SERVER_HPP

#include <string>
#include <signal.h>
#include "vst_io_context_pool.hpp"
#include "vst_connection.hpp"
#include "vst_log_mockup.hpp"

namespace vst
{

/**
 * @brief Server
 * 
 * @tparam MessageProcessor - message processor class
 */
template<typename MessageProcessor>
class server
{
public:
    // non-copyable
    server(const server&) = delete;
    server& operator=(const server&) = delete;

    /**
     * @brief Construct a new server object
     * 
     * @param io_context_pool_size - number of threads running boost::asio::io_context instances
     * @param max_message_size - maximum acceptable incoming message size in bytes
     */
    explicit server(
        std::size_t io_context_pool_size,
        uint32_t max_message_size)
        : io_context_pool_(io_context_pool_size),
          signals_(io_context_pool_.get_io_context()),
          acceptor_(io_context_pool_.get_io_context()),
          max_message_size_(max_message_size)
    {}

    /**
     * @brief Run the server
     * 
     * @param address server's endpoint ip address
     * @param port server's endpoint port
     */
    void run(
        const std::string& address, 
        const std::string& port)
    {
        VST_LOG(VST_LOG_LEVEL_INFO) << "Running server at " << address << ":" << port;

        signals_.add(SIGINT);
        signals_.add(SIGTERM);

        this->do_await_stop();

        boost::asio::ip::tcp::resolver resolver(acceptor_.get_executor());
        boost::asio::ip::tcp::endpoint endpoint = *resolver.resolve(address, port).begin();
        acceptor_.open(endpoint.protocol());
        acceptor_.set_option(boost::asio::ip::tcp::acceptor::reuse_address(true));
        acceptor_.bind(endpoint);
        acceptor_.listen();

        this->do_accept();

        io_context_pool_.run();
    }

private:
    void do_accept()
    {
        acceptor_.async_accept(
            io_context_pool_.get_io_context(),
            [this](boost::system::error_code ec, boost::asio::ip::tcp::socket socket)
            {
                if (!acceptor_.is_open()) {
                    VST_LOG(VST_LOG_LEVEL_ERROR) << "Can not open boost::asio acceptor!";
                    return;
                }

                if (!ec) {
                    std::make_shared<vst::connection<MessageProcessor>>(std::move(socket), max_message_size_)->start();
                }

                this->do_accept();
            }
        );
    }

    void do_await_stop()
    {
        signals_.async_wait(
            [this](boost::system::error_code /*ec*/, int /*signo*/)
            {
                VST_LOG(VST_LOG_LEVEL_INFO) << "Terminating server";
                io_context_pool_.stop();
            }
        );
    }

    io_context_pool io_context_pool_;
    boost::asio::signal_set signals_;
    boost::asio::ip::tcp::acceptor acceptor_;
    uint32_t max_message_size_;
};

} // namespace vst

#endif // VST_SERVER_HPP
