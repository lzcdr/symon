/*
 * ------------------------------------------------------------------------------
 * Project: symon
 * Version: 0.0.1
 * Description: Tiny Command Line Interface Remote System Monitor.
 * Author: lzcdr
 * Date: 2024-03-04 10:07:41
 * ------------------------------------------------------------------------------
 * This file was automatically generated by the Bytesnap RPC (version 0.1.0) 
 * project generator.
 * ------------------------------------------------------------------------------
 */

// 
// vst_connection.hpp
// ---------------
// tcp/ip client/server framework based on boost::asio
// using custom protocol with a fixed length message header
// and variable length message body
//
// Copyright(c) 2024-present, lzcdr
//
// Distributed under the MIT License (http://opensource.org/licenses/MIT)

#ifndef VST_CONNECTION_HPP
#define VST_CONNECTION_HPP

#include <boost/asio.hpp>
#include <boost/range.hpp>
#include <boost/random.hpp>
#include <memory>
#include <vector>
#include <cstdint>
#include <ctime>
#include "vst_message.hpp"
#include "vst_log_mockup.hpp"

namespace vst
{

// Default incoming/outgoing mesages buffer size in bytes
const std::size_t DEFAULT_BUFFER_SIZE = 8192;

/**
 * @brief client connection class
 * 
 * @tparam MessageProcessor - message processor class
 */
template<typename MessageProcessor>
class connection : public std::enable_shared_from_this<connection<MessageProcessor>>
{
public:
    // non-copyable
    connection(const connection&) = delete;
    connection& operator=(const connection&) = delete;

    /**
     * @brief Construct a new connection object
     * 
     * @param socket 
     * @param max_message_size - maximum acceptable incoming message size in bytes
     */
    explicit connection(
        boost::asio::ip::tcp::socket socket, 
        uint32_t max_message_size)
        : socket_(std::move(socket)),
          current_key_(0),
          max_message_size_(max_message_size),
          request_buffer_(DEFAULT_BUFFER_SIZE),
          reply_buffer_(DEFAULT_BUFFER_SIZE),
          rng_(static_cast<unsigned int>(std::time(nullptr)))
    {
        VST_LOG(VST_LOG_LEVEL_INFO) << "Accepted connection from " 
            << socket_.remote_endpoint().address().to_string();
        socket_.set_option(boost::asio::ip::tcp::no_delay(true));
        socket_.set_option(boost::asio::socket_base::keep_alive(true));
        send_buffers_ = std::vector<boost::asio::const_buffer>(2);
    }

    void start()
    {
        do_read_header();
    }

private:
    void do_read_header()
    {
        auto self(this->shared_from_this());
        boost::asio::async_read(
            socket_,
            boost::asio::buffer(&message_header_, sizeof(message_header_)),
            [this, self](boost::system::error_code ec, std::size_t bytes_transferred)
            {
                if(!ec) {
                    message_header_.adjust_byteorder();
                    auto header_check_result = check_header();
                    if (header_check_result == message_error_code::OK) {
                        if (message_header_.message_size <= MESSAGE_HEADER_PAYLOAD_SIZE) {
                            if (request_buffer_.size() < message_header_.message_size) {
                                request_buffer_.resize(message_header_.message_size);
                            }
                            std::memcpy(request_buffer_.data(), &message_header_.payload_, message_header_.message_size);
                            buffer input(request_buffer_, message_header_.message_size, message_header_.method_type_id);
                            buffer output(reply_buffer_, 0);
                            auto result = message_processor_(input, output);
                            if (result == message_error_code::OK) {
                                do_write_header(output.size(), output.method_type_id());
                            } else {
                                // TODO - log message, result error, connection will be auto closed
                                VST_LOG(VST_LOG_LEVEL_ERROR) << "Error processing request from " 
                                << socket_.remote_endpoint().address().to_string() 
                                << ". Message processor error code = " << static_cast<int>(result);
                            }
                        } else {
                            do_read_message();
                        }
                    } else {
                        // TODO - log message, header_check_result error, connection will be auto closed
                        VST_LOG(VST_LOG_LEVEL_ERROR) << "Bad request header from " 
                            << socket_.remote_endpoint().address().to_string();
                    }
                } else if (ec != boost::asio::error::eof) {
                    // TODO - log message, ec error, connection will be auto closed

                    // initiate connection closure
                    boost::system::error_code ignored_ec;
                    socket_.shutdown(boost::asio::ip::tcp::socket::shutdown_both, ignored_ec);

                    //std::cout << "error 2, ec=" << ec.message() << std::endl;
                    VST_LOG(VST_LOG_LEVEL_ERROR) << "Error reading request header from " 
                        << socket_.remote_endpoint().address().to_string() 
                        << ". Error: " << ec.message();                    
                } else {
                    VST_LOG(VST_LOG_LEVEL_INFO) << "Connection from " 
                        << socket_.remote_endpoint().address().to_string() << " closed";
                }
            }
        );
    }

    void do_read_message()
    {
        auto self(this->shared_from_this());
        if (request_buffer_.size() < message_header_.message_size) {
            request_buffer_.resize(message_header_.message_size);
        }
        boost::asio::async_read(
            socket_,
            boost::asio::buffer(request_buffer_.data(), message_header_.message_size),
            [this, self](boost::system::error_code ec, std::size_t bytes_transferred)
            {
                if(!ec) {
                    buffer input(request_buffer_, message_header_.message_size, message_header_.method_type_id);
                    buffer output(reply_buffer_, 0);
                    auto result = message_processor_(input, output);
                    if (result == message_error_code::OK) {
                        do_write_header(output.size(), output.method_type_id());
                    } else {
                        // TODO - log message, result error, connection will be auto closed
                        VST_LOG(VST_LOG_LEVEL_ERROR) << "Error processing request from " 
                        << socket_.remote_endpoint().address().to_string() 
                        << ". Message processor error code = " << static_cast<int>(result);
                    }
                } else {
                    // TODO - log message, ec error, connection will be auto closed

                    // initiate connection closure
                    boost::system::error_code ignored_ec;
                    socket_.shutdown(boost::asio::ip::tcp::socket::shutdown_both, ignored_ec);

                    VST_LOG(VST_LOG_LEVEL_ERROR) << "Error reading request message from " 
                        << socket_.remote_endpoint().address().to_string() 
                        << ". Error: " << ec.message();
                }
            }
        );
    }

    void do_write_header(std::size_t msg_size, uint32_t method_type_id)
    {
        // modify key
        current_key_ = rng_dist_(rng_);

        // fill header
        message_header_.key = current_key_;
        message_header_.message_size = static_cast<uint32_t>(msg_size);
        message_header_.signature = MESSAGE_SIGNATURE;
        message_header_.method_type_id = method_type_id;

        if (msg_size <= MESSAGE_HEADER_PAYLOAD_SIZE) {
            std::memcpy(&message_header_.payload_, reply_buffer_.data(), message_header_.message_size);
            auto self(this->shared_from_this());
            message_header_.adjust_byteorder();
            boost::asio::async_write(
                socket_,
                boost::asio::buffer(&message_header_, sizeof(message_header_)),
                [this, self, msg_size](boost::system::error_code ec, std::size_t bytes_transferred)
                {
                    if(!ec) {
                        //do_write_message(msg_size);
                        do_read_header();
                    } else {
                        // TODO - log message, ec error, connection will be auto closed

                        // initiate connection closure
                        boost::system::error_code ignored_ec;
                        socket_.shutdown(boost::asio::ip::tcp::socket::shutdown_both, ignored_ec);

                        VST_LOG(VST_LOG_LEVEL_ERROR) << "Error writing request to " 
                            << socket_.remote_endpoint().address().to_string() 
                            << ". Error: " << ec.message();
                    }
                }
            );
        } else {
            send_buffers_[0] = boost::asio::buffer(&message_header_, sizeof(message_header_));
            send_buffers_[1] = boost::asio::buffer(reply_buffer_.data(), msg_size);

            auto self(this->shared_from_this());
            message_header_.adjust_byteorder();
            boost::asio::async_write(
                socket_,
                boost::make_iterator_range(send_buffers_.begin(), send_buffers_.end()),
                [this, self, msg_size](boost::system::error_code ec, std::size_t bytes_transferred)
                {
                    if(!ec) {
                        //do_write_message(msg_size);
                        do_read_header();
                    } else {
                        // TODO - log message, ec error, connection will be auto closed

                        // initiate connection closure
                        boost::system::error_code ignored_ec;
                        socket_.shutdown(boost::asio::ip::tcp::socket::shutdown_both, ignored_ec);

                        VST_LOG(VST_LOG_LEVEL_ERROR) << "Error writing request to " 
                            << socket_.remote_endpoint().address().to_string() 
                            << ". Error: " << ec.message();
                    }
                }
            );
        }
    }

    message_error_code check_header()
    {
        if (message_header_.signature != MESSAGE_SIGNATURE) {
            return message_error_code::BAD_SIGNATURE;
        }
        if (message_header_.key != current_key_) {
            return message_error_code::BAD_KEY;
        }
        if (message_header_.message_size > max_message_size_) {
            return message_error_code::MESSAGE_SIZE_TOO_BIG;
        }
        return message_error_code::OK;
    }

    boost::asio::ip::tcp::socket socket_;
    MessageProcessor message_processor_;
    message_header message_header_;
    uint32_t current_key_;
    uint32_t max_message_size_;
    std::vector<uint8_t> request_buffer_;
    std::vector<uint8_t> reply_buffer_;
    std::vector<boost::asio::const_buffer> send_buffers_;
    boost::random::mt19937 rng_;
    boost::random::uniform_int_distribution<uint32_t> rng_dist_;
};

template<typename MessageProcessor>
using connection_ptr = std::shared_ptr<connection<MessageProcessor>>;

} // namespace vst

#endif // VST_CONNECTION_HPP
