/*
 * ------------------------------------------------------------------------------
 * Project: symon
 * Version: 0.0.1
 * Description: Tiny Command Line Interface Remote System Monitor.
 * Author: lzcdr
 * Date: 2024-03-04 10:07:41
 * ------------------------------------------------------------------------------
 * This file was automatically generated by the Bytesnap RPC (version 0.1.0) 
 * project generator.
 * ------------------------------------------------------------------------------
 */

// 
// vst_message.hpp
// ---------------
// tcp/ip client/server framework based on boost::asio
// using custom protocol with a fixed length message header
// and variable length message body
//
// Copyright(c) 2024-present, lzcdr
//
// Distributed under the MIT License (http://opensource.org/licenses/MIT)

#ifndef VST_MESSAGE_HPP
#define VST_MESSAGE_HPP

#include <cstdint>
#include <array>
#include "vst_buffer.hpp"
#include "bytesnap.hpp"

namespace vst
{

// Message signature
const uint32_t MESSAGE_SIGNATURE = 0xA1A2A3A4;

// Message header payload size (if the message fits in the payload, it will be sent in the header without a body)
const uint32_t MESSAGE_HEADER_PAYLOAD_SIZE = 100;

// Message processing error codes
enum class message_error_code
{
    OK,                             // no errors
    BAD_SIGNATURE,                  // bad message signature
    BAD_KEY,                        // bad message key
    MESSAGE_SIZE_TOO_BIG,           // message size exceeds declared limit
    BAD_REQUEST_MESSAGE,
    MESSAGE_PROCESSOR_NOT_FOUND         
};

// Message header
struct message_header
{
    // message signature
    uint32_t signature;

    // message key
    uint32_t key;

    // method type id
    uint32_t method_type_id;

    // message body size in bytes
    uint32_t message_size;

    // message header payload
    std::array<uint8_t, MESSAGE_HEADER_PAYLOAD_SIZE> payload_;

    void adjust_byteorder()
    {
        if constexpr (! bytesnap::is_little_endian()) {
            this->signature = bswap_32(this->signature);
            this->key = bswap_32(this->key);
            this->method_type_id = bswap_32(this->method_type_id);
            this->message_size = bswap_32(this->message_size);
        }
    }
};

// Message processor prototype
struct message_processor_base
{
    /**
     * @brief process the incoming message and write the outgoing
     * 
     * @param input buffer with incoming message
     * @param output buffer with outgoing message
     * @return message_error_code 
     */
    message_error_code operator()(const buffer& input, buffer& output)
    {}
};

} // namespace vst

#endif // VST_MESSAGE_HPP
