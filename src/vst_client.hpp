/*
 * ------------------------------------------------------------------------------
 * Project: symon
 * Version: 0.0.1
 * Description: Tiny Command Line Interface Remote System Monitor.
 * Author: lzcdr
 * Date: 2024-03-04 10:07:41
 * ------------------------------------------------------------------------------
 * This file was automatically generated by the Bytesnap RPC (version 0.1.0) 
 * project generator.
 * ------------------------------------------------------------------------------
 */

#ifndef VST_CLIENT_HPP
#define VST_CLIENT_HPP

#include <cstdint>
#include <vector>
#include <boost/asio.hpp>
#include <boost/range.hpp>
#include "vst_message.hpp"

namespace vst
{

class client
{
public:
    client(const client&) = delete;
    client& operator=(const client&) = delete;

    explicit client(
        boost::asio::io_context& io_context,
        const std::string& host,
        const std::string& port) :
        resolver_(io_context),
        socket_(io_context)
    {
        auto endpoint = resolver_.resolve(host, port);
        boost::asio::connect(socket_, endpoint);

        socket_.set_option(boost::asio::ip::tcp::no_delay(true));
        socket_.set_option(boost::asio::socket_base::keep_alive(true));
    }

    bool get(const buffer& request, buffer& reply, uint32_t& key)
    {
        boost::system::error_code ec;

        // write the request's header
        message_header_.signature = MESSAGE_SIGNATURE;
        message_header_.key = key;
        message_header_.message_size = static_cast<uint32_t>(request.size());
        message_header_.method_type_id = request.method_type_id();
        message_header_.adjust_byteorder();

        if (request.size() <= MESSAGE_HEADER_PAYLOAD_SIZE) {
            std::memcpy(&message_header_.payload_, request.raw_ptr(), request.size());
            boost::asio::write(
                socket_,
                boost::asio::buffer(&message_header_, sizeof(message_header_)),
                ec);
        } else {
            std::vector<boost::asio::const_buffer> send_buffers(2);
            send_buffers[0] = boost::asio::buffer(&message_header_, sizeof(message_header_));
            send_buffers[1] = boost::asio::buffer(request.raw_ptr(), request.size());
            boost::asio::write(
                socket_, 
                boost::make_iterator_range(send_buffers.begin(), send_buffers.end()), 
                ec);
        }
        if (ec) {
            return false;
        }

        // read the reply's header
        boost::asio::read(socket_, boost::asio::buffer(&message_header_, sizeof(message_header_)), ec);
        if (!ec || ec == boost::asio::error::eof) {
            message_header_.adjust_byteorder();
            if (message_header_.signature != MESSAGE_SIGNATURE) {
                return false;
            }
            key = message_header_.key;

            // read the reply
            reply.allocate(message_header_.message_size);
            if (message_header_.message_size <= MESSAGE_HEADER_PAYLOAD_SIZE) {
                std::memcpy(reply.raw_ptr(), &message_header_.payload_, message_header_.message_size);
                reply.set_method_type_id(message_header_.method_type_id);
                return true;
            } else {
                boost::asio::read(socket_, boost::asio::buffer(reply.raw_ptr(), message_header_.message_size), ec);
                reply.set_method_type_id(message_header_.method_type_id);
                if (!ec || ec == boost::asio::error::eof) {
                    return true;
                } else {
                    return false;
                }
            }
        } else {
            return false;
        }
    }

private:
    boost::asio::ip::tcp::resolver resolver_;
    boost::asio::ip::tcp::socket socket_;
    message_header message_header_;
};

} // namespace vst

#endif // VST_CLIENT_HPP
