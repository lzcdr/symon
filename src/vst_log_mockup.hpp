/*
 * ------------------------------------------------------------------------------
 * Project: symon
 * Version: 0.0.1
 * Description: Tiny Command Line Interface Remote System Monitor.
 * Author: lzcdr
 * Date: 2024-03-04 10:07:41
 * ------------------------------------------------------------------------------
 * This file was automatically generated by the Bytesnap RPC (version 0.1.0) 
 * project generator.
 * ------------------------------------------------------------------------------
 */

// 
// vst_log_mockup.hpp
// ---------------
// tcp/ip client/server framework based on boost::asio
// using custom protocol with a fixed length message header
// and variable length message body
//
// Copyright(c) 2024-present, lzcdr
//
// Distributed under the MIT License (http://opensource.org/licenses/MIT)

#ifndef VST_LOG_MOCKUP_HPP
#define VST_LOG_MOCKUP_HPP

#include <array>
#include <string>
#include <iostream>
#include <sstream>
#include <functional>

namespace vst
{

/**
 * @brief Logging wrapper macro based on naive_logwriter, 
 * @usage: VST_LOG(VST_LOG_LEVEL_DEBUG) << "hello " << "world";
 * 
 */
#define VST_LOG(level) \
    vst::logwriter_wrapper<vst::naive_logwriter>().get_stream(level)

/**
 * @brief Logging levels
 * 
 */
#define VST_LOG_LEVEL_NONE      0
#define VST_LOG_LEVEL_FATAL     1
#define VST_LOG_LEVEL_ERROR     2
#define VST_LOG_LEVEL_WARNING   3
#define VST_LOG_LEVEL_INFO      4
#define VST_LOG_LEVEL_DEBUG     5
#define VST_LOG_LEVEL_VERBOSE   6

/**
 * @brief Log writer prototype
 * 
 */
struct logwriter_base
{
    /**
     * @brief Write log message
     * 
     * @param level logging level
     * @param message log message
     */
    void operator()(int level, const std::string& message)
    {}
};

/**
 * @brief Naive log writer implementation, just writes into the std::cout without timestamps, not thread-safe
 * 
 */
struct naive_logwriter
{
    void operator()(int level, const std::string& message)
    {
        static std::array<std::string, 7> level_names = {
            "NONE", "FATAL", "ERROR", "WARNING", "INFO", "DEBUG", "VERBOSE"
        };
        std::cout << "[" << level_names[level] << "] " << message << std::endl;
    }
};

/**
 * @brief Log writer wrapper class
 * 
 * @tparam Logwriter log writer implementation class
 */
template<typename Logwriter>
class logwriter_wrapper
{
public:
    std::ostringstream& get_stream(int level) 
    { 
        level_ = level;
        return ss_; 
    }
    ~logwriter_wrapper()
    {
        logwriter_(level_, ss_.str());
    }

private:
    std::ostringstream ss_;
    Logwriter logwriter_;
    int level_{0};
};

} // namespace vst

#endif // VST_LOG_MOCKUP_HPP
