/*
 * ------------------------------------------------------------------------------
 * Project: symon
 * Version: 0.0.1
 * Description: Tiny Command Line Interface Remote System Monitor.
 * Author: lzcdr
 * Date: 2024-03-04 10:07:41
 * ------------------------------------------------------------------------------
 * This file was automatically generated by the Bytesnap RPC (version 0.1.0) 
 * project generator.
 * ------------------------------------------------------------------------------
 */

#include <cstdint>
#include <string>
#include <string_view>
#include <map>
#include <vector>
#include <optional>
#include <bit>

#ifndef __BYTESNAP_HPP
#define __BYTESNAP_HPP

#ifdef _MSC_VER

#include <stdlib.h>
#define bswap_32(x) _byteswap_ulong(x)
#define bswap_64(x) _byteswap_uint64(x)

#elif defined(__APPLE__)

// Mac OS X / Darwin features
#include <libkern/OSByteOrder.h>
#define bswap_32(x) OSSwapInt32(x)
#define bswap_64(x) OSSwapInt64(x)

#elif defined(__sun) || defined(sun)

#include <sys/byteorder.h>
#define bswap_32(x) BSWAP_32(x)
#define bswap_64(x) BSWAP_64(x)

#elif defined(__FreeBSD__)

#include <sys/endian.h>
#define bswap_32(x) bswap32(x)
#define bswap_64(x) bswap64(x)

#elif defined(__OpenBSD__)

#include <sys/types.h>
#define bswap_32(x) swap32(x)
#define bswap_64(x) swap64(x)

#elif defined(__NetBSD__)

#include <sys/types.h>
#include <machine/bswap.h>
#if defined(__BSWAP_RENAME) && !defined(__bswap_32)
#define bswap_32(x) bswap32(x)
#define bswap_64(x) bswap64(x)
#endif

#elif defined(__GNUG__)

#define bswap_32(x) __builtin_bswap32(x)
#define bswap_64(x) __builtin_bswap64(x)

#else

#define bswap_32(x) (((x) >> 24) | \
                     (((x) & 0x00FF0000) >> 8) | \
                     (((x) & 0x0000FF00) << 8) | \
                     ((x) << 24))
#define bswap_64(x) (((x) >> 56) | \
                     (((x) & 0x00FF000000000000) >> 40) | \
                     (((x) & 0x0000FF0000000000) >> 24) | \
                     (((x) & 0x000000FF00000000) >> 8) | \
                     (((x) & 0x00000000FF000000) << 8) | \
                     (((x) & 0x0000000000FF0000) << 24) | \
                     (((x) & 0x000000000000FF00) << 40) | \
                     ((x) << 56))
#endif


namespace bytesnap {

consteval bool is_little_endian() {
    return std::endian::native == std::endian::little;
}


/***
 * Note: bytes are stored in the little endian order.
*/
class writer {
public:
    writer(const writer&) = delete;
    writer& operator=(const writer&) = delete;
    
    explicit writer(std::vector<uint8_t>& buffer) : _buffer(buffer) {}

    size_t size() const { return _buffer.size(); }
    
    std::vector<uint8_t>& buffer() const { return _buffer; }

    void write_uint8_t(uint8_t value) {
        _buffer.push_back(value); 
    }

    void write_uint16_t(uint16_t value) {
        if constexpr (is_little_endian()) {
            std::size_t sz = _buffer.size();
            _buffer.resize(sz + sizeof(value));
            memcpy(_buffer.data() + sz, &value, sizeof(value));
        } else {
            uint16_t swapped = (value << 8) | (value >> 8);
            std::size_t sz = _buffer.size();
            _buffer.resize(sz + sizeof(swapped));
            memcpy(_buffer.data() + sz, &swapped, sizeof(swapped));
        }
    }

    void write_uint32_t(uint32_t value) {
        if constexpr (is_little_endian()) {
            std::size_t sz = _buffer.size();
            _buffer.resize(sz + sizeof(value));
            memcpy(_buffer.data() + sz, &value, sizeof(value));
        } else {
            uint32_t swapped = bswap_32(value);
            std::size_t sz = _buffer.size();
            _buffer.resize(sz + sizeof(swapped));
            memcpy(_buffer.data() + sz, &swapped, sizeof(swapped));
        }
    }

    void write_uint64_t(uint64_t value) {
        if constexpr (is_little_endian()) {
            std::size_t sz = _buffer.size();
            _buffer.resize(sz + sizeof(value));
            memcpy(_buffer.data() + sz, &value, sizeof(value));
        } else {
            uint64_t swapped = bswap_64(value);
            std::size_t sz = _buffer.size();
            _buffer.resize(sz + sizeof(swapped));
            memcpy(_buffer.data() + sz, &swapped, sizeof(swapped));
        }
    }

    void write_int8_t(int8_t value) {
        write_uint8_t(*(uint8_t*)&value);
    }

    void write_int16_t(int16_t value) {
        write_uint16_t(*(uint16_t*)&value);
    }

    void write_int32_t(int32_t value) {
        write_uint32_t(*(uint32_t*)&value);
    }

    void write_int64_t(int64_t value) {
        write_uint64_t(*(uint64_t*)&value);
    }

    void write_float(float value) {
        write_uint32_t(*(uint32_t*)&value);
    }

    void write_double(double value) {
        write_uint64_t(*(uint64_t*)&value);
    }

    void write_bool(bool value) {
        value ? write_uint8_t(1) : write_uint8_t(0);
    }

    void write_bytes(const void* bytes, size_t numBytes) {
        write_uint32_t(numBytes);
        std::size_t sz = _buffer.size();
        _buffer.resize(sz + numBytes);
        memcpy(_buffer.data() + sz, bytes, numBytes);
    }

    void write_string_view(std::string_view value) {
        size_t size = value.length();
        write_uint32_t(size);
        std::size_t sz = _buffer.size();
        _buffer.resize(sz + size);
        memcpy(_buffer.data() + sz, value.data(), size);
    }

private:
    std::vector<uint8_t>& _buffer;
};

class reader {
public:
    reader(const reader&) = delete;
    reader& operator=(const reader&) = delete;
    
    explicit reader(std::vector<uint8_t>& buffer) 
        : _buffer(buffer), _start(buffer.data()), _ptr(buffer.data()), _end(buffer.data() + buffer.size()) {}
    
    size_t size() const { return _buffer.size(); }
    
    std::vector<uint8_t>& buffer() const { return _buffer; }

    size_t tell() const { return (_ptr - _start); }
    
    std::optional<size_t> seek(size_t position) {
        if (position >= _buffer.size()) return std::nullopt;
        _ptr = _start + position;
        return position;
    }

    std::optional<size_t> skip(size_t numBytes) {
        if (_ptr + numBytes > _end) return std::nullopt;
        _ptr += numBytes;
        return tell();
    }

    std::optional<uint8_t> read_uint8_t() {
        if (_ptr + sizeof(uint8_t) > _end) return std::nullopt;
        return *_ptr++;
    }

    std::optional<uint16_t> read_uint16_t() {
        if (_ptr + sizeof(uint16_t) > _end) return std::nullopt;
        
        uint16_t value = *(uint16_t*)_ptr;
        _ptr += sizeof(uint16_t);
        if constexpr (is_little_endian()) {
            return value;
        } else {
            return (value << 8) | (value >> 8);
        }
    }

    std::optional<uint32_t> read_uint32_t() {
        if (_ptr + sizeof(uint32_t) > _end) return std::nullopt;
        
        uint32_t value = *(uint32_t*)_ptr;
        _ptr += sizeof(uint32_t);
        if constexpr (is_little_endian()) {
            return value;
        } else {
            return bswap_32(value);
        }
    }

    std::optional<uint64_t> read_uint64_t() {
        if (_ptr + sizeof(uint64_t) > _end) return std::nullopt;
        
        uint64_t value = *(uint64_t*)_ptr;
        _ptr += sizeof(uint64_t);
        if constexpr (is_little_endian()) {
            return value;
        } else {
            return bswap_64(value);
        }
    }

    std::optional<int8_t> read_int8_t() {
        if (_ptr + sizeof(uint8_t) > _end) return std::nullopt;
        return *(int8_t*)_ptr++;
    }

    std::optional<int16_t> read_int16_t() {
        if (_ptr + sizeof(uint16_t) > _end) return std::nullopt;
        
        uint16_t value = *(uint16_t*)_ptr;
        _ptr += sizeof(uint16_t);
        if constexpr (!is_little_endian()) {
            value = (value << 8) | (value >> 8);
        }
        return *(int16_t*)&value;
    }

    std::optional<int32_t> read_int32_t() {
        if (_ptr + sizeof(uint32_t) > _end) return std::nullopt;
        
        uint32_t value = *(uint32_t*)_ptr;
        _ptr += sizeof(uint32_t);
        if constexpr (!is_little_endian()) {
            value = bswap_32(value);
        }
        return *(int32_t*)&value;
    }

    std::optional<int64_t> read_int64_t() {
        if (_ptr + sizeof(uint64_t) > _end) return std::nullopt;
        
        uint64_t value = *(uint64_t*)_ptr;
        _ptr += sizeof(uint64_t);
        if constexpr (!is_little_endian()) {
            value = bswap_64(value);
        }
        return *(int64_t*)&value;
    }

    std::optional<float> read_float() {
        if (_ptr + sizeof(uint32_t) > _end) return std::nullopt;

        uint32_t value = *(uint32_t*)_ptr;
        _ptr += sizeof(uint32_t);
        if constexpr (!is_little_endian()) {
            value = bswap_32(value);
        }
        return *(float*)&value;
    }

    std::optional<double> read_double() {
        if (_ptr + sizeof(uint64_t) > _end) return std::nullopt;

        uint64_t value = *(uint64_t*)_ptr;
        _ptr += sizeof(uint64_t);
        if constexpr (!is_little_endian()) {
            value = bswap_64(value);
        }
        return *(double*)&value;
    }

    std::optional<bool> read_bool() {
        if (_ptr + sizeof(uint8_t) > _end) return std::nullopt;
        uint8_t value = *_ptr++;
        return value ? true : false;
    }

    std::optional<std::pair<size_t, uint8_t*>> get_bytes_ptr() {
        if (_ptr + sizeof(uint32_t) > _end) return std::nullopt;
        
        uint32_t numBytes = *(uint32_t*)_ptr;
        _ptr += sizeof(uint32_t);
        if constexpr (!is_little_endian()) {
            numBytes = bswap_32(numBytes);
        }

        if (_ptr + numBytes > _end) return std::nullopt;

        auto result = std::make_pair(numBytes, _ptr);
        _ptr += numBytes;
        return result;
    }

    std::optional<std::string_view> get_string_view() {
        if (_ptr + sizeof(uint32_t) > _end) return std::nullopt;
        
        uint32_t numBytes = *(uint32_t*)_ptr;
        _ptr += sizeof(uint32_t);
        if constexpr (!is_little_endian()) {
            numBytes = bswap_32(numBytes);
        }

        if (_ptr + numBytes > _end) return std::nullopt;

        auto result = std::string_view((const char*)_ptr, numBytes);
        _ptr += numBytes;
        return result;
    }

private:
    std::vector<uint8_t>& _buffer;
    uint8_t* _start;
    uint8_t* _ptr;
    uint8_t* _end;
};

}; // namespace bytesnap

#endif //__BYTESNAP_HPP
