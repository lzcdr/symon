/*
 * ------------------------------------------------------------------------------
 * Project: symon
 * Version: 0.0.1
 * Description: Tiny Command Line Interface Remote System Monitor.
 * Author: lzcdr
 * Date: 2024-03-04 10:07:41
 * ------------------------------------------------------------------------------
 * This file was automatically generated by the Bytesnap RPC (version 0.1.0) 
 * project generator.
 * ------------------------------------------------------------------------------
 */

#ifndef VST_BUFFER_HPP
#define VST_BUFFER_HPP

#include <vector>
#include <cstdint>

namespace vst
{

class buffer
{
public:
    buffer(const buffer&) = delete;
    buffer& operator=(const buffer&) = delete;

    explicit buffer(std::vector<uint8_t>& base, uint32_t mthd_type_id) : base_(base), size_(0), method_type_id_(mthd_type_id) {}
    explicit buffer(std::vector<uint8_t>& base, std::size_t size, uint32_t mthd_type_id) : base_(base), size_(size), method_type_id_(mthd_type_id) {}

    std::vector<uint8_t>& base() const
    {
        return base_;
    }

    void* raw_ptr() const
    {
        return base_.data();
    }

    std::size_t size() const
    {
        return size_;
    }

    uint32_t method_type_id() const
    {
        return method_type_id_;
    }

    void set_method_type_id(uint32_t id)
    {
        method_type_id_ = id;
    }

    void allocate(std::size_t size)
    {
        if (size > base_.size()) {
            base_.resize(size);
        }
        size_ = size;
    }

    void fit()
    {
        size_ = base_.size();
    }

private:
    std::vector<uint8_t>& base_;
    std::size_t size_;
    uint32_t method_type_id_;
};

} // namespace vst

#endif // VST_BUFFER_HPP
